<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="renderer" content="webkit">

    <title>类目分类</title>

    <link href="css/base.css" rel="stylesheet">
    <link href="css/animate.css" rel="stylesheet">
    <link href="css/index.css" rel="stylesheet">
    <link href="css/style.css" rel="stylesheet">
    <link href="css/zTreeStyle/zTreeStyle.css" rel="stylesheet">

</head>

<body class="gray-bg">
    <div class="wrapper wrapper-content animated fadeInRight wrapperPdl">
        <div class="debtManagement pad20">
            <div id="TreeList"> 
                <div class="debtManagementHead">
                    <div class="debtManagementTitle TitleActive">
                        类目分类
                    </div>
                </div>
                <div class="ManagementTableWarp">
                    <div class="classAdd" id="addParent">+</div>
                    <div class="ztreeItemBackground">
                        <ul id="treeItem" class="ztree"></ul>
                    </div>
                </div>
            </div>
        </div>
        
    </div>

    <script src="js/jquery.min.js"></script>
    <script src="js/plugins/jquery.ztree.core.min.js"></script>
    <script src="js/plugins/jquery.ztree.excheck.min.js"></script>
    <script src="js/plugins/jquery.ztree.exedit.min.js"></script>

    <script>
       var setting = {
        view: {
            addHoverDom: addHoverDom,
            removeHoverDom: removeHoverDom,
            selectedMulti: false
        },
        edit: {
            enable: true,
            editNameSelectAll: true
        },
        data: {
            simpleData: {
                enable: true
            }
        },
        callback: {
            beforeDrag: beforeDrag,
            beforeEditName: beforeEditName,
            beforeRemove: beforeRemove,
            beforeRename: beforeRename,
            onRemove: onRemove,
            onRename: onRename
        }
    };

		var zNodes =[
			{ id:1, pId:0, name:"房产", open:true},
			{ id:11, pId:1, name:"新房"},
			{ id:12, pId:1, name:"二手房"},
			{ id:2, pId:0, name:"汽车", open:true},
			{ id:21, pId:2, name:"新车"},
			{ id:22, pId:2, name:"二手车"},
			{ id:3, pId:0, name:"其他", open:true},
			{ id:31, pId:3, name:"滋补养生"},
			{ id:32, pId:3, name:"饮品"},
			{ id:33, pId:3, name:"百货"}
		];
		var log, className = "dark";
		function beforeDrag(treeId, treeNodes) {
			return false;
		}
		function beforeEditName(treeId, treeNode) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" beforeEditName ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
			var zTree = $.fn.zTree.getZTreeObj("treeItem");
			zTree.selectNode(treeNode);
			setTimeout(function() {
				
					setTimeout(function() {
						zTree.editName(treeNode);
					}, 0);
				
			}, 0);
			return false;
		}
		function beforeRemove(treeId, treeNode) {
			className = (className === "dark" ? "":"dark");
			showLog("[ "+getTime()+" beforeRemove ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
			var zTree = $.fn.zTree.getZTreeObj("treeItem");
			zTree.selectNode(treeNode);
            if(treeNode.children && treeNode.children.length > 0){
                alert("存在二级目录不能删除");
                return false;
            }
			return confirm("确认删除  -- " + treeNode.name + " 吗？");
		}
		function onRemove(e, treeId, treeNode) {
			showLog("[ "+getTime()+" onRemove ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name);
		}
		function beforeRename(treeId, treeNode, newName, isCancel) {
			className = (className === "dark" ? "":"dark");
			showLog((isCancel ? "<span style='color:red'>":"") + "[ "+getTime()+" beforeRename ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name + (isCancel ? "</span>":""));
			if (newName.length == 0) {
				setTimeout(function() {
					var zTree = $.fn.zTree.getZTreeObj("treeItem");
					zTree.cancelEditName();
					alert("类目名称不能为空.");
				}, 0);
				return false;
			}
			return true;
		}
		function onRename(e, treeId, treeNode, isCancel) {
			showLog((isCancel ? "<span style='color:red'>":"") + "[ "+getTime()+" onRename ]&nbsp;&nbsp;&nbsp;&nbsp; " + treeNode.name + (isCancel ? "</span>":""));
		}
		function showRemoveBtn(treeId, treeNode) {
			return !treeNode.isFirstNode;
		}
		function showRenameBtn(treeId, treeNode) {
			return !treeNode.isLastNode;
		}
		function showLog(str) {
			if (!log) log = $("#log");
			log.append("<li class='"+className+"'>"+str+"</li>");
			if(log.children("li").length > 8) {
				log.get(0).removeChild(log.children("li")[0]);
			}
		}
		function getTime() {
			var now= new Date(),
			h=now.getHours(),
			m=now.getMinutes(),
			s=now.getSeconds(),
			ms=now.getMilliseconds();
			return (h+":"+m+":"+s+ " " +ms);
		}

		var newCount = 1;
		function addHoverDom(treeId, treeNode) {
			var sObj = $("#" + treeNode.tId + "_span");
			if (treeNode.editNameFlag || $("#addBtn_"+treeNode.tId).length>0) return;
			var addStr = "<span class='button add' id='addBtn_" + treeNode.tId
				+ "' title='add node' onfocus='this.blur();'></span>";
			sObj.after(addStr);
			var btn = $("#addBtn_"+treeNode.tId);
			if (btn) btn.bind("click", function(){
				var zTree = $.fn.zTree.getZTreeObj("treeItem");
				zTree.addNodes(treeNode, {id:(100 + newCount), pId:treeNode.id, name:"new node" + (newCount++)});
				return false;
			});
		};
		function removeHoverDom(treeId, treeNode) {
			$("#addBtn_"+treeNode.tId).unbind().remove();
		};
		function selectAll() {
			var zTree = $.fn.zTree.getZTreeObj("treeItem");
			zTree.setting.edit.editNameSelectAll =  $("#selectAll").attr("checked");
		}
        function add(e) {
			var zTree = $.fn.zTree.getZTreeObj("treeItem"),
			isParent = e.data.isParent,
			nodes = zTree.getSelectedNodes(),
			treeNode = nodes[0];
			if (treeNode) {
				treeNode = zTree.addNodes(null, {id:(100 + newCount), pId:0, isParent:isParent, name:"new node" + (newCount++)});
			} else {
				treeNode = zTree.addNodes(null, {id:(100 + newCount), pId:0, isParent:isParent, name:"new node" + (newCount++)});
			}
			if (treeNode) {
				zTree.editName(treeNode[0]);
			} else {
				alert("叶子类目被锁定，无法增加子类目");
			}
		};
		$(document).ready(function(){
			$.fn.zTree.init($("#treeItem"), setting, zNodes);
			$("#addParent").bind("click", {isParent:true}, add);
		});
    </script>
</body>

</html>